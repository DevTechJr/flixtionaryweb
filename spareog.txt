// import React, { useState, useEffect } from "react";
// import secureLocalStorage from "react-secure-storage";
// import { Card, Spinner } from "flowbite-react";
// import { toast, ToastContainer } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";

// const MovieFetcher = () => {
//   const [movieData, setMovieData] = useState(
//     () => secureLocalStorage.getItem("movieData") || null
//   );
//   const [loading, setLoading] = useState(!movieData);
//   const [errorMessage, setErrorMessage] = useState("");
//   const [guess, setGuess] = useState("");
//   const [attempts, setAttempts] = useState(
//     () => secureLocalStorage.getItem("attempts") || []
//   );
//   const [remainingGuesses, setRemainingGuesses] = useState(() =>
//     5 - attempts.length > 0 ? 5 - attempts.length : 0
//   );

//   const handleSubmit = (e) => {
//     e.preventDefault();

//     if (remainingGuesses <= 0) {
//       toast.warning("The correct word was: " + movieData.word);
//       setGuess("");
//       // pause for 2 seconds before refreshing
//       setTimeout(() => {
//         handleRefresh();
//       }, 2000);
//       return;
//     }

//     if (!guess) {
//       toast.warn("Please enter a guess!");
//       return;
//     }

//     const normalizedGuess = guess.trim().toLowerCase();
//     const normalizedWord = movieData.word.toLowerCase();

//     if (normalizedGuess === normalizedWord) {
//       toast.success("Congratulations! You guessed it right!");
//       setGuess("");
//       // pause for 2 seconds before refreshing
//       setTimeout(() => {
//         handleRefresh();
//       }, 2000);
//       //   handleRefresh();
//       return;
//     }

//     // Create an object to track character frequencies in the word
//     const wordFrequency = normalizedWord.split("").reduce((acc, char) => {
//       acc[char] = (acc[char] || 0) + 1;
//       return acc;
//     }, {});

//     // Count matched letters from the guess that are present in the word
//     let matchedLetters = 0;

//     for (const char of normalizedGuess) {
//       if (wordFrequency[char] > 0) {
//         matchedLetters++;
//         wordFrequency[char]--; // Decrease the frequency of that letter
//       }
//     }

//     // Add the guess to attempts
//     const newAttempt = {
//       guess,
//       matchedLetters,
//     };
//     const updatedAttempts = [...attempts, newAttempt];
//     setAttempts(updatedAttempts);
//     secureLocalStorage.setItem("attempts", updatedAttempts);

//     setRemainingGuesses(remainingGuesses - 1);

//     if (remainingGuesses - 1 === 0) {
//       // Game over
//       toast.warning("The correct word was: " + movieData.word);
//       setGuess("");
//       // pause for 2 seconds before refreshing
//       setTimeout(() => {
//         handleRefresh();
//       }, 2000);
//     } else {
//       toast.info(`${matchedLetters} letters matched! Try again.`);
//     }

//     setGuess("");
//   };

//   // Async function to call OpenAI API
//   const execute = async (prompt) => {
//     try {
//       const headers = {
//         "Content-Type": "application/json",
//         Authorization: `Bearer ${process.env.REACT_APP_OPENAIKEY}`, // Replace with your actual API key
//       };
//       const response = await fetch(
//         "https://api.openai.com/v1/chat/completions",
//         {
//           method: "POST",
//           headers,
//           body: JSON.stringify({
//             model: "gpt-4o-mini",
//             messages: [{ role: "user", content: prompt }],
//             temperature: 0,
//             max_tokens: 550,
//           }),
//         }
//       );
//       const data = await response.json();
//       return data.choices[0].message.content.trim();
//     } catch (error) {
//       console.error("OpenAI API error:", error);
//       throw new Error("Failed to generate response from OpenAI");
//     }
//   };

//   const fetchMovieData = async () => {
//     setLoading(true);
//     try {
//       const releaseYear = Math.floor(Math.random() * (2024 - 1990 + 1)) + 1990;
//       const pageNumber = Math.floor(Math.random() * 3) + 1;
//       const url = `https://api.themoviedb.org/3/discover/movie?include_adult=false&include_video=false&language=en-US&page=${pageNumber}&primary_release_year=${releaseYear}&sort_by=popularity.desc&with_original_language=en`;

//       const options = {
//         method: "GET",
//         headers: {
//           accept: "application/json",
//           Authorization: `Bearer ${process.env.REACT_APP_TMDBKEY}`, // Replace with your actual Movie DB API key
//         },
//       };

//       const response = await fetch(url, options);
//       const data = await response.json();
//       const randomMovie =
//         data.results[Math.floor(Math.random() * data.results.length)];

// // extract id from randomMovie
// const movieId = randomMovie.id;
// // fetch movie details
// const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${movieId}?language=en-US`;
// const movieDetailsResponse = await fetch(movieDetailsUrl, options);
// const movieDetailsData = await movieDetailsResponse.json();
// const genres = movieDetailsData.genres.map((genre) => genre.name);

//       // Generate guessable word
//       const wordPrompt = `
//             You are a data generator that must output ONLY a string containing a single word. Follow these strict requirements:

//             1. Generate exactly one unique word related to the information about the movie.
//             2. The word must:
//                - Be between 2-10 characters long
//                - Contain only letters (no numbers, spaces, or special characters)
//                - Be a real, verifiable {type}
//                - Be properly capitalized if it is a proper noun
//             3. The output must be:
//                - A single-line string containing just this one word
//                - The word enclosed in double quotes and within square brackets, with no commas or additional elements

//             Important rules:
//             - No abbreviations
//             - No slang or informal terms
//             - No compound words with spaces
//             - Output must be valid string that can be parsed
//             - Only output the string - no explanations or additional text

//             Example output format for a single city:
//             "Tokyo"

//             Generate a valid string containing a single word related to this movie:

//             Title: "${randomMovie?.title}"
//             Release Date: "${randomMovie?.release_date}"
//             Overview: "${randomMovie?.overview}"

//             MAKE THE WORD RELATED TO THE MOVIE AND INFORMATION BUT MAKE IT NOT TOO HARD (Medium level difficulty) TO GUESS. THIS IS A FOR A -MEDIUM GUESSING GAME targeted towards teens-adults and kids.
//         `; // Your prompt here
//       const wordResponse = await execute(wordPrompt);
//       const wordArray = JSON.parse(wordResponse); // Parse the response to get a plain array
//       const word = wordArray[0]; // Extract the actual word string

//       // Generate clue
//       const cluePrompt = `
// You are a crossword clue generator that must output ONLY a valid string containing a single clue. Using the provided word (${word}), create an engaging, context-aware crossword clue following these strict requirements:
// 1. Generate exactly ONE clue based on the word: ${word} that:
//    - Is a single sentence ending with a period
//    - Is between 30-100 characters long
//    - Does not contain the movie title or any obvious derivatives
//    - Uses proper grammar and punctuation
//    - Is specific enough to lead directly to the movie or its defining characteristic
//    - Follows standard crossword conventions
//    - Can incorporate any relevant markers from {markers} if appropriate
// 2. The clue must:
//    - Be challenging but fair
//    - Be factually accurate and directly related to the given movie information
//    - Avoid subjective opinions and focus on verifiable details
//    - Be written in present tense, unless historical context requires past
//    - Be clear, unambiguous, and suitable for general audiences
//    - Demonstrate contextual understanding of the movie overview, release date, or notable themes
//    - Make sure the clue is not too hard or too easy to guess. It should use the context of the movie information below.

// 3. Output format:
//    - A single valid string with the clue as a string
//    - Enclose the clue in double quotes and within square brackets, with no additional elements or comments
// Example output format for a single movie clue:
// ["Set in a galaxy far, far away, this iconic saga redefined space opera."]
// Convert these requirements into a string containing a single, context-aware clue related to the movie ${randomMovie?.title}, using the provided movie information:
// Use the information below for context to create the clue for the word: ${word}

// {
//   "title": "${randomMovie?.title}",
//   "release_date": "${randomMovie?.release_date}",
//   "overview": "${randomMovie?.overview}"

//   THE CLUE Has to be related to this word: ${randomMovie?.word}. The users will use your clue to GUESS this word! The clue should be a single sentence ending with a period. The clue should give the reader a hint to the word.

//   THE CLUE must be a NOUN such as a name, word, place, object or thing. You must begin the clue with "This [type of noun] is" and give the remaining clue.

//   MAKE SURE TO NOT MENTION THE ACTUAL LITERAL WORD IN THE CLUE. DO NOT INCLUDE AND STATE THE MOVIE TITLE OR THE WORD IN THE CLUE TEXT.
// }
// `; // Your clue prompt here
//       const clueResponse = await execute(cluePrompt);
//       const clueArray = JSON.parse(clueResponse); // Parse the response to get a plain array
//       const clue = clueArray[0]; // Extract the actual clue string

//       // Combine everything in a single movieData object
//       const movieWithGameData = {
//         ...randomMovie,
//         word: word,
//         clue: clue,
//         genres: genres,
//       };
//       console.log(movieWithGameData);
//       setMovieData(movieWithGameData);
//       secureLocalStorage.setItem("movieData", movieWithGameData);
//     } catch (e) {
//       setErrorMessage(
//         e instanceof Error ? e.message : "An unknown error occurred"
//       );
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     if (!movieData) {
//       fetchMovieData();
//     }
//   }, [movieData]);

//   const handleRefresh = () => {
//     secureLocalStorage.removeItem("movieData");
//     secureLocalStorage.removeItem("attempts");
//     // Show what the actual word was
//     toast.warning("The correct word was: " + movieData.word);
//     // set a timeout so the toast shows for 2 seconds
//     setTimeout(() => {
//       setAttempts([]);
//       setRemainingGuesses(5);
//       setMovieData(null);
//       fetchMovieData();
//     }, 2000);
//   };

//   if (loading) {
//     return (
//       <div className="flex h-64 items-center justify-center">
//         <Spinner size="xl" />
//       </div>
//     );
//   }

//   if (errorMessage) {
//     return (
//       <div className="p-4 text-center text-red-500">Error: {errorMessage}</div>
//     );
//   }

//   const getRandomColor = () => {
//     const colors = [
//       "bg-pink-300",
//       "bg-purple-300",
//       "bg-blue-300",
//       "bg-green-300",
//       "bg-yellow-300",
//       "bg-orange-300",
//       "bg-red-300",
//       "bg-indigo-300",
//       "bg-cyan-300",
//       "bg-teal-300",
//     ];
//     return colors[Math.floor(Math.random() * colors.length)];
//   };

//   return (
//     <div className="min-h-screen bg-gray-900 py-8">
//       <div className="container mx-auto px-4">
//         {/* Header Section */}
//         <div className="text-center mb-12">
//           <h1 className="text-5xl font-bold text-white mb-4 shadow-lg p-2 inline-block bg-gray-800 rounded-lg">
//             flixtionary
//           </h1>
//           <p className="text-xl text-gray-300 font-semibold">
//             Use the clue and your movie knowledge to guess the word!
//           </p>
//         </div>

//         {/* Main Content Section */}
//         <div className="max-w-2xl mx-auto">
//           <Card className="bg-white rounded-xl shadow-lg overflow-hidden">
// {/* Movie Info Section */}
// <div className="px-4 py-2 text-center">
//   {/* Clue Section */}
//   <div className="bg-gray-100 p-4 rounded-lg mb-6 shadow-md">
//     <p className="text-sm font-bold text-gray-900 italic">
//       Clue:{" "}
//       <span className="text-yellow-600 font-bold">
//         {movieData.clue}
//       </span>
//     </p>
//     <p className="text-xs font-semibold text-gray-700 mt-2 italic">
//       Try to guess the word! Remaining Guesses:{" "}
//       <span className="text-yellow-500">{remainingGuesses}</span>
//     </p>
//   </div>

//   {/* Movie Image Section with Shadow Box */}
//   <div className="bg-gray-200 h-64 rounded-lg mt-4 mb-6 flex items-center justify-center shadow-lg overflow-hidden">
//     <img
//       // replace with tmdb image url
//       src={`https://image.tmdb.org/t/p/w500${movieData.backdrop_path}`}
//       alt="Movie Placeholder"
//       className="rounded-lg shadow-xl"
//     />
//   </div>

// <div className="space-y-4">
//   {/* Movie Details Row */}
//   <div className="flex justify-between px-4 flex-wrap">
//     {/* Genre Pills */}
//     <div className="text-center">
//       <p className="text-sm font-semibold text-gray-600 mb-2">
//         Genre(s)
//       </p>
//       <div className="flex flex-wrap justify-center gap-2">
//         {movieData.genres?.map((genre, index) => (
//           <span
//             key={index}
//             className={`${getRandomColor()} px-3 py-1 rounded-full text-xs font-semibold text-gray-900`}
//           >
//             {genre}
//           </span>
//         ))}
//       </div>
//     </div>

//     {/* Word Length */}
//     <div className="text-center">
//       <p className="text-sm font-semibold text-gray-600 mb-2">
//         Word Length
//       </p>
//       <p className="text-yellow-600 font-bold">
//         {movieData.word.length} Letters
//       </p>
//     </div>
//   </div>

//                 {/* Guess Input Section */}
//                 <form
//                   onSubmit={handleSubmit}
//                   className="w-4/5 flex mx-auto justify-center gap-4 py-4"
//                 >
//                   <input
//                     type="text"
//                     value={guess}
//                     onChange={(e) => setGuess(e.target.value)}
//                     maxLength={20} // Limits the input to 20 characters
//                     placeholder="Enter your guess..."
//                     autoFocus
//                     className="w-3/5 text-2xl text-gray-900 rounded-lg placeholder-gray-400 pb-2 border-b-2 border-gray-200 focus:outline-none focus:border-gray-400 transition-colors duration-200"
//                   />
//                   <button
//                     type="submit"
//                     className="bg-green-600 hover:bg-green-700 text-white font-semibold px-6 py-2 rounded-lg transition-colors duration-200"
//                   >
//                     Check
//                   </button>
//                 </form>
//               </div>
//             </div>
//           </Card>

//           {/* Display Previous Attempts */}
//           <div className="text-center mt-6">
//             {attempts.length > 0 && (
//               <>
//                 <h3
//                   data-tooltip-target="tooltip-default"
//                   className="text-lg text-white font-semibold mb-2"
//                 >
//                   Your Attempts:
//                 </h3>
//                 <div
//                   id="tooltip-default"
//                   role="tooltip"
//                   class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700"
//                 >
//                   <div class="tooltip-arrow" data-popper-arrow></div>
//                 </div>
//                 <p className="text-sm text-gray-400 mb-4">
//                   This shows all your past guesses and how many letters in the
//                   mystery word, you correctly guessed.
//                 </p>
//                 <ul className="flex space-x-4 justify-center flex-wrap">
//                   {attempts.map((attempt, index) => (
//                     <li key={index} className="text-gray-200">
//                       #{index + 1}: {attempt.guess} -{" "}
//                       <span className="text-yellow-400">
//                         {attempt.matchedLetters} letters correct
//                       </span>
//                     </li>
//                   ))}
//                 </ul>
//               </>
//             )}
//           </div>

//           <div className="text-center mt-8">
//             <button
//               onClick={handleRefresh}
//               className="bg-red-600 hover:bg-red-700 text-white font-semibold px-8 py-3 rounded-lg transition-colors duration-200 shadow-lg"
//             >
//               Give Up
//             </button>
//           </div>

//           <ToastContainer
//             position="top-center"
//             autoClose={3000}
//             hideProgressBar={false}
//           />
//         </div>
//       </div>
//     </div>
//   );
// };

// export default MovieFetcher;